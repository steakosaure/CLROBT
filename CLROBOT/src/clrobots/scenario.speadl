import clrobots.interfaces.Callable
import clrobots.interfaces.CycleAlert
import clrobots.interfaces.Do
import clrobots.interfaces.ITakeThreads
import environnement.Cellule
import java.awt.Color
import java.awt.Point
import java.util.Map
import clrobots.interfaces.ICreateRobot
import environnement.interfaces.IEnvInfos
import clrobots.interfaces.Iinteragir

namespace clrobots{
	

	
	ecosystem ForwardLauncher{
		species AgentForward{
			provides finishedCycle: CycleAlert
			requires launchCycle: Do
		}
		
		requires finishedCycle: CycleAlert
		provides launchCycle: Do
	}
	
	component Launcher{
		provides call: Callable
		provides finishedCycle: CycleAlert
		provides threads: ITakeThreads 
	}
	
	ecosystem RobotForwardAssemblyEco [Actionable, Context, SelfKnowledge]{
		requires threads: ITakeThreads
		requires finishedCycle: CycleAlert
		requires envInfos: Context
		requires interagir: Actionable
		provides createRobot: ICreateRobot
		
		part ecoAE: EcoRobotAgents[Actionable, Context, SelfKnowledge] {
			bind threads to threads
		}
		
		part fw: Forward[CycleAlert, Context, Actionable]{
			bind i to finishedCycle
			bind j to envInfos
			bind k to interagir
		}
		
		species DynamicAssembly(id: String, color: Color, position: Cellule, nests: Map[Color, Point]){
			
			use agentE: ecoAE.Robot(id, color, position, nests){
				bind finishedCycle to aFW.a
				bind envInteraction to aFW.c
				bind envContext to aFW.b
			}
			use aFW: fw.Agent
		}
		
		
	}
	
	ecosystem ScenarioEco[Actionable, Context, ContextInit, SelfKnowledge, UpdateOutput]{
		
		part environnement: Environnement[Actionable, Context, ContextInit, UpdateOutput] {
			bind updateOutput to gui.updateGUI
			bind createRobot to rfAssemblyEco.createRobot
		}
		
		part gui: GUI[UpdateOutput, ContextInit] {
			bind initEnvironnement to environnement.envInit
		}
		
		part rfAssemblyEco: RobotForwardAssemblyEco[Actionable, Context, SelfKnowledge] {
			bind threads to launcher.threads
			bind finishedCycle to launcher.finishedCycle
			bind envInfos to environnement.envInfos
			bind interagir to environnement.interagir
		}
		
		part launcher: Launcher

	}
	
	ecosystem Forward[I,J,K]{
		 species Agent{
		 	
		 	provides a: I
		 	provides b: J
		 	provides c: K
		 }
		 
		 requires i: I
		 requires j: J
		 requires k: K
	} 
	

	
		
	
}