import clrobots.interfaces.CycleAlert
import clrobots.interfaces.Do
import clrobots.interfaces.ITakeThreads
import environnement.Cellule
import java.awt.Color
import java.awt.Point
import java.util.Map

namespace clrobots {
	
	
	//Composant permettant l'affichage
	ecosystem EcoRobotAgents [Actionable, Context, SelfKnowledge, Push, Pull] {
		
			requires threads: ITakeThreads
				
			//requires updateRobotsMap: UpdateRobotsList
			
			species Robot (id: String, color: Color, position: Cellule, nests: Map[Color,Point]) {
				
				requires pushMessage: Push
				requires pullMessage: Pull 
				requires envInteraction: Actionable
				requires envContext: Context
				provides launchCycle : Do = percevoir.perception	
				requires finishedCycle: CycleAlert
				
				part knowledge: Knowledge[SelfKnowledge]
				
				part percevoir: Percevoir[Context, SelfKnowledge, Pull]{
					bind decision to decider.decision
					bind knowledge to knowledge.selfKnowledge
					bind context to envContext
					bind getMessage to pullMessage
				}
				
				part decider: Decider[Actionable, SelfKnowledge, Push]{
					bind action to agir.action
					bind knowledge to knowledge.selfKnowledge
					bind sendMessage to agir.sendMessage
				}
				part agir: Agir[Actionable, SelfKnowledge, Push] {
					bind finishedCycle to finishedCycle
					bind interagir to envInteraction
					bind knowledge to knowledge.selfKnowledge
					bind push to pushMessage
				
			}
		}
	}
	
	component Knowledge [SelfKnowledge] {
		provides selfKnowledge: SelfKnowledge
		
	}
		
	component Percevoir [Context, SelfKnowledge, Pull] {
		provides perception : Do
		requires context: Context
		requires knowledge: SelfKnowledge
		requires decision: Do
		requires getMessage: Pull
	}
	
	component Decider [Actionable, SelfKnowledge, Push]{
		provides decision : Do
		requires action: Actionable
		requires knowledge: SelfKnowledge
		requires sendMessage: Push
		
	}
	
	component Agir [Actionable, SelfKnowledge, Push] {
		provides action : Actionable
		requires interagir: Actionable
		requires finishedCycle : CycleAlert
		requires knowledge: SelfKnowledge 
		provides sendMessage: Push
		requires push: Push
	}
	
	
	
	
}